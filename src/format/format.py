from datetime import datetime
import json

ID64_MAGIC_NUMBER = 76561197960265728
TF2BD_ATTRIBUTES = ["cheater", "suspicious", "exploiter", "racist"]

##### REPEATED CALLERS #####

def _format_ncc(string: str) -> str:
    return f"{string} - {string}"

def _format_cathook(string: str) -> str:
    return f"cat_pl_add_id {int(string) - ID64_MAGIC_NUMBER} RAGE"

##### FORMATTERS #####

def format_ncc_list(list: list) -> list:
    return [_format_ncc(i) for i in list]

def format_cathook_list(list: list) -> list:
    return [_format_cathook(i) for i in list]

def format_amalgam_list(list: list, tag: str = "Bot") -> str:
    formatted_list = ["{\n"]
    for i in list:
        formatted_list.append(f"""    "{int(i) - ID64_MAGIC_NUMBER}": [
        "{tag}"
    ]{"," if i != list[-1] else ""}\n""")
    formatted_list.append("}")
    return "".join(formatted_list)

def format_amalgam_dict(dict: dict) -> str:
    formatted_list = ["{\n"]
    for i, tags in dict.items():
        formatted_list.append(f"""    "{i}": [
        {", ".join(f'"{tag}"' for tag in tags)}
    ]{"," if i != list(dict.keys())[-1] else ""}\n""")
    formatted_list.append("}")
    return "".join(formatted_list)

def format_lbox_list(list: list, priority: int) -> str:
    if priority in [0, 1]:
        print("WARNING: Invalid priority assigned, changing to 2...")
        priority = 2
    if priority < -1:
        priority = -1
    if priority > 10:
        priority = 10

    ret = ""
    for i in list:
        ret += f"{dec_to_hex(int(i) - ID64_MAGIC_NUMBER)};{priority};"
    return ret

def format_lua_list(ids, priorities, is_dict=False, listname="Error"):

    def lua_dict_len(d):
        total = 0
        ret = "\n"
        for key, value in d.items():
            count = len(value) if hasattr(value, '__len__') else 0
            ret += f"-- {key} has {count} IDs\n"
            total += count
        ret += f"\n-- {total} IDs in total.\n"
        final = f"\nprint(\"{total} players added.\")"
        return ret + "\n", final

    now = datetime.now()
    header = "--[[ auto-priority script made by Pianta's BotListConverter ]]\n"
    header += f"--[[ generated at {now.strftime('%d-%b-%y %a')} ]]\n"

    if is_dict:
        for key in priorities:
            if priorities[key] in [0, 1]:
                print("WARNING: Invalid priority assigned, changing to 2...")
                priorities[key] = 2
            if priorities[key] < -1:
                priorities[key] = -1
            if priorities[key] > 10:
                priorities[key] = 10

        counts, final = lua_dict_len(ids)

        ret = header + f"\n-- {len(ids)} ID lists in total.\n"
        ret += counts
        for category, id_list in ids.items():
            priority = priorities[category]
            ret += f"-- {category}\n"
            for i in id_list:
                ret += f"\n-- {i} (id3 [U:1:{int(i) - ID64_MAGIC_NUMBER}])"
                ret += f"\nplayerlist.SetPriority(\"{id64_to_id2(int(i))}\", {priority});\n"
            ret += "\n"
        ret += f"print(\"{len(ids)} categories processed.\")"
        ret += final
    else:
        priority = priorities
        if priority in [0, 1]:
            print("WARNING: Invalid priority assigned, changing to 2...")
            priority = 2
        if priority < -1:
            priority = -1
        if priority > 10:
            priority = 10
        ret = header + f"\n-- {len(ids)} players in total.\n"
        ret += f"\n-- {listname}\n"
        for i in ids:
            ret += f"\n-- {i} (id3 [U:1:{int(i) - ID64_MAGIC_NUMBER}])"
            ret += f"\nplayerlist.SetPriority(\"{id64_to_id2(int(i))}\", {priority});\n"
        ret += f"\nprint(\"{len(ids)} players added.\")"

    return ret

def format_tf2bd_list(ids, listname = "Bot", attribute_index = 1, proof = "generated by BotListConverter"):
    for idx, single_attribute in enumerate(TF2BD_ATTRIBUTES):
        print(f"{idx + 1}. {single_attribute}")
        
    attribute_index = int(input(f"Which label do you want to assign for the '{listname}' list? "))
    attributes = TF2BD_ATTRIBUTES[attribute_index - 1]
    
    players = []
    for steam_id in ids:
        steam_id_32 = int(steam_id) - ID64_MAGIC_NUMBER
        players.append({
            "attributes": [attributes],
            "proof": [proof],
            "steamid": f"[U:1:{steam_id_32}]"
        })
    
    data = {
        "$schema": "https://raw.githubusercontent.com/PazerOP/tf2_bot_detector/master/schemas/v3/playerlist.schema.json",
        "file_info": {
            "authors": ["Pianta's BotListConverter"],
            "description": f"generated by BotListConverter - list '{listname}'",
            "title": "autogen"
        },
        "players": players
    }
    
    return json.dumps(data, indent=4)

##### UTILS #####

def id64_to_id2(steamid64):
    account_id = steamid64 - ID64_MAGIC_NUMBER
    y = account_id % 2
    z = (account_id - y) // 2
    return f"STEAM_0:{y}:{z}"

def dec_to_hex(num):
    hex_str = hex(num)[2:]
    return hex_str

def remove_duplicates_dict(input_dict):
    output_dict = {}
    for key, value in input_dict.items():
        output_dict[key] = list(set(value))
    return output_dict

def remove_duplicates_list(input_list):
    return list(set(input_list))
